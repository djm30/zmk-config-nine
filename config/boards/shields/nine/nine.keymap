/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
 };
&sk {
     release-after-ms = <2000>;
     quick-release;
 };
 
/* Layers */
#define AL1 0
#define AL2 1
#define A2U 2
#define SM1 3
#define SM2 4
#define NUM 5
#define NAV 6
#define BT 7
#define FUN 8


/ { 
    combos {
        compatible = "zmk,combos";


// 3 KEY COMBOS
        combo_fun {
            timeout-ms = <30>;
            key-positions = <0 1 2>;
            bindings = <&sl FUN>;
        };
        combo_nav {
            timeout-ms = <30>;
            key-positions = <3 4 5>;
            bindings = <&to NAV>;
        };
        combo_caps {
            timeout-ms = <30>;
            key-positions = <7 8 9>;
            bindings = <&caps_word>;
        };
        combo_bt  {
            timeout-ms = <10>;
            key-positions = <10 11 12>;
            bindings = <&to BT>;
            layers = <SM1>;
        };

//  LEFT HAND COMBOS
        combo_esc {
            timeout-ms = <30>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_del {
            timeout-ms = <30>;
            key-positions = <1 2>;
            bindings = <&kp DEL>;
        };

        combo_tab {
            timeout-ms = <30>;
            key-positions = <7 8>;
            bindings = <&kp TAB>;
        };

        combo_lbkt {
            timeout-ms = <30>;
            key-positions = <0 7>;
            bindings = <&kp LBKT>;
        };
        combo_lbrc {
            timeout-ms = <30>;
            key-positions = <1 8>;
            bindings = <&kp LBRC>;
        };
        combo_lprn {
            timeout-ms = <30>;
            key-positions = <2 9>;
            bindings = <&kp LPRN>;
        };

//  RIGHT HAND COMBOS
        combo_bspc {
            timeout-ms = <30>;
            key-positions = <4 5>;
            bindings = <&kp BSPC>;
        };

        combo_ent {
            timeout-ms = <30>;
            key-positions = <10 11>;
            bindings = <&kp RET>;
        };

        combo_rprn {
            timeout-ms = <30>;
            key-positions = <3 10>;
            bindings = <&kp RPRN>;
        };
        combo_rbrc {
            timeout-ms = <30>;
            key-positions = <4 11>;
            bindings = <&kp RBRC>;
        };
        combo_rbkt {
            timeout-ms = <30>;
            key-positions = <5 12>;
            bindings = <&kp RBKT>;
        };
    };

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_L";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
        };
        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_R";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
        };
        sr: shift_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&to>;
        retro-tap;
        };
        hl_l: homerow_layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_L";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            // hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
        };
        hl_r: homerow_layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_R";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
        };
    td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
  };

  macros {
    alpha2macro: behavior_macro_1 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = < &sl AL2 >;
      };
    caps_alpha2macro: behavior_macro_2 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = < &sl A2U >;
      };
  };


//                  0       1       2                   3       4           5
//          6       7       8       9                   10      11          12          13
//                          14      15                  16      17
       keymap {
                compatible = "zmk,keymap";
                
                alpha1 {
        bindings = <
                            &hm_l LCTL L    &hm_l LALT G    &hm_l LGUI D                &hm_r RGUI H    &hm_r LALT U        &hm_r RCTL O
            &hl_l NUM I     &hl_l SM2 S     &hl_l SM1 R     &hl_l LG(LC(LS(LALT))) T    &hl_r LC(LS(LALT)) N     &hl_r SM1 E         &hl_r SM2 A     &hl_r NUM C
                                            &key_repeat     &lt NAV SPC                &caps_alpha2macro  &alpha2macro
        >;
        };
                alpha2 {
                label = "Al2";
        bindings = <
                    &kp V       &kp W               &kp M               &kp F       &kp SQT         &kp Z
        &kp Q       &kp J       &kp P               &kp K               &kp B       &kp DOT         &kp X       &kp Y
                                &caps_word          &sk LSHIFT         &none        &sl A2U
        >;
        };

                alpha2cap {
                bindings = <
                    &kp LS(V)	  &kp LS(W)	     &kp LS(M)        	 	&kp LS(F)    	&trans		&kp LS(Z)	
        &kp LS(Q) 	&kp LS(J) 	&kp LS(P)	     &kp LS(K)		        &kp LS(B)	    &kp COMMA	&kp LS(X)	&kp LS(Y) 
                                &trans 		     &trans 			        &trans	      &none
        >;
        };
                sym1 {
        bindings = <
                    &kp DLLR    &kp GRAVE  &kp DQT                        &kp LT          &kp GT        &kp EQUAL
        &kp COLON   &kp PIPE    &kp AMPS   &kp QMARK                      &kp EXCL        &kp GT     &kp MINUS  &kp SEMI
                                &trans     &sr LSHIFT AL1                 &kp SQT         &kp COMMA
        >;
        };

                sym2 {
        bindings = <
                    &kp LPAR    &kp RPAR        &kp CARET                 &kp UNDER   &kp LA(3)    &kp PLUS
        &kp MINUS   &kp LS(3)   &kp ATSN        &kp PRCNT                 &kp TILDE   &kp BSLH    &kp STAR    &kp SLASH
                                &trans          &sr LSHIFT AL1            &trans      &trans

        >;
        };

        num {
        bindings = <
                          &hm_l LCTL MINUS    &hm_l LALT N0   &hm_l LGUI N1       &hm_r RGUI N2   &hm_r LALT N3    &hm_r RCTL N4
        &td SLASH MINUS   &td STAR PLUS       &kp N5          &kp N6              &kp N7          &kp N8           &kp N9         &kp EQUAL
                                              &trans          &trans              &kp LALT        &kp RGUI
        >;
        };

        nav {
        bindings = <
                            &none          &td LG(V) LG(C)        &kp PG_UP       &kp HOME  &kp UP    &kp END
        &kp LG(LBKT)        &to AL1        &td LG(LS(4))          &kp PG_DN       &kp LEFT  &kp DOWN  &kp RIGHT   &kp LG(RBKT)
                                           &none                  &none           &kp LGUI  &kp LSHIFT
        >;
        };

        bt {
        bindings = <
                  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2           &bt BT_SEL 3     &bt BT_SEL 4   &trans
        &trans    &sys_reset      &trans        &bootloader            &bootloader      &trans         &sys_reset  &bt BT_CLR
                                  &none         &to AL1                &none     &none
        >;
        };

        fun {
            bindings = <
                     &kp F1   &kp F2    &kp F3           &kp F4    &kp F5    &kp F6
     &kp C_VOL_DN    &kp F7   &kp F8    &kp F9           &kp F10   &kp F11   &kp F12  &kp C_VOL_UP
                               &none     &to AL1          &none    &kp C_MUTE
                >;
        };
    };
};
